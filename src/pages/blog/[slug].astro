---
import { getCollection, getEntry } from 'astro:content';
import Prose from '../../components/Prose.astro';
import Layout from '../../layouts/Layout.astro';
import { render } from 'astro:content';
import '../../styles/global.css';
import SocialIcons from '../../components/SocialIcons.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');

  return posts.map((post) => ({
    params: { slug: post.id },
    props: { post },
  }));
}

const { post } = Astro.props;
const author = await getEntry(post.data.author);
const { Content } = await render(post);

// Fetch related posts based on tags
const allPosts = await getCollection('blog');
const relatedPosts = allPosts
  .filter((p) => p.id !== post.id)
  .filter((p) => p.data.tags.some((tag) => post.data.tags.includes(tag)))
  .sort((a, b) => {
    const aTags = a.data.tags.filter((tag) =>
      post.data.tags.includes(tag)
    ).length;
    const bTags = b.data.tags.filter((tag) =>
      post.data.tags.includes(tag)
    ).length;
    return bTags - aTags;
  })
  .slice(0, 3);
---

<Layout>
  <main class="container mx-auto px-4 py-12 max-w-5xl">
    {/* Back Button */}
    <a
      href="/"
      class="inline-flex items-center mb-8 text-slate-600 hover:text-indigo-600 transition-colors group"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5 mr-2 transform group-hover:-translate-x-1 transition-transform"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
      </svg>
      Back to Blog
    </a>

    <article class="space-y-8">
      {/* Post Title */}
      <h1 class="text-4xl font-bold text-slate-900 tracking-tight">
        {post.data.title}
      </h1>

      {/* Post Tags */}
      <div class="flex flex-wrap gap-2">
        {
          post.data.tags.map((tag) => (
            <a
              href={`/tag/${tag}`}
              class="px-3 py-1 text-sm bg-slate-100 text-slate-700 rounded-full hover:bg-indigo-100 hover:text-indigo-700 transition-colors"
            >
              #{tag}
            </a>
          ))
        }
      </div>

      {/* Post Metadata */}
      <div
        class="flex flex-wrap items-center gap-x-6 gap-y-2 text-sm text-slate-600"
      >
        {/* Publication Date */}
        <div class="flex items-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 mr-1"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
            ></path>
          </svg>
          <time datetime={post.data.pubDate.toISOString()}>
            {
              new Date(post.data.pubDate).toLocaleDateString('en-US', {
                day: 'numeric',
                month: 'long',
                year: 'numeric',
              })
            }
          </time>
        </div>

        {/* Update Date */}
        {
          post.data.updatedDate && (
            <div class="flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-4 w-4 mr-1"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                />
              </svg>
              <span>
                Updated on:{' '}
                {new Date(post.data.updatedDate).toLocaleDateString('en-US', {
                  day: 'numeric',
                  month: 'long',
                  year: 'numeric',
                })}
              </span>
            </div>
          )
        }

        {/* Estimated Reading Time */}
        <div class="flex items-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 mr-1"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span>{Math.ceil((post.body?.length || 0) / 1500)} min read</span>
        </div>
      </div>

      {/* Author Information */}
      <div class="flex items-center gap-4 mb-10 p-6 bg-slate-50 rounded-xl">
        <img
          src={author.data.avatar || '/images/authors/default-avatar.png'}
          alt={author.data.name}
          class="w-14 h-14 rounded-full object-cover ring-2 ring-indigo-100"
        />
        <div class="flex-1">
          <div class="flex items-center justify-between">
            <div>
              <p class="font-semibold text-slate-900">{author.data.name}</p>
              <p class="text-sm text-slate-600">{author.data.bio}</p>
            </div>

            {
              author.data.socialLinks && (
                <SocialIcons socialLinks={author.data.socialLinks} />
              )
            }
          </div>
        </div>
      </div>

      {/* Post Content */}
      <div
        class="bg-white shadow-xl rounded-xl p-10 my-8 border border-slate-200 hover:shadow-2xl transition-all duration-300"
      >
        <Prose>
          <Content />
        </Prose>
      </div>

      {/* Related Posts */}
      {
        relatedPosts.length > 0 && (
          <div class="mt-16">
            <h2 class="text-2xl font-bold text-slate-800 mb-6">
              Related Posts
            </h2>
            <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {relatedPosts.map((relatedPost) => (
                <article class="group bg-white border border-slate-200 rounded-xl overflow-hidden hover:shadow-lg transition-all duration-300">
                  <a href={`/blog/${relatedPost.id}`} class="block p-6">
                    {/* Posts Title */}
                    <h3 class="font-semibold text-lg text-slate-800 group-hover:text-indigo-600 transition-colors mb-2">
                      {relatedPost.data.title}
                    </h3>

                    {/* Posts Description */}
                    {relatedPost.data.description && (
                      <p class="text-slate-600 text-sm line-clamp-2 mb-4">
                        {relatedPost.data.description}
                      </p>
                    )}

                    {/* Posts Tag */}
                    <div class="flex flex-wrap gap-2 mt-auto pt-4 border-t border-slate-100">
                      {relatedPost.data.tags.map((tag) => (
                        <span class="px-2 py-1 text-xs bg-slate-50 text-slate-600 rounded-full hover:bg-indigo-50 hover:text-indigo-600 transition-colors">
                          #{tag}
                        </span>
                      ))}
                    </div>
                  </a>
                </article>
              ))}
            </div>
          </div>
        )
      }
    </article>
  </main>
</Layout>
